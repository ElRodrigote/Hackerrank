import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        Trie trieTest = new Trie();
        
        for(int a0 = 0; a0 < n; a0++){
            String op = in.next();
            String contact = in.next();
            
            if (op.equals("add")) {
                trieTest.add(contact);
            } else if (op.equals("find")) {
                System.out.println(trieTest.find(contact));
            }
        }
    }
}

class Node {
    private HashMap<Character, Node> child = new HashMap<>();
    public int size;

    public Node getChild(char letter) {
        return child.get(letter);
    }
    
    public void setChild(char letter) {
        child.putIfAbsent(letter, new Node());
    }
}

class Trie {
    Node root = new Node();
    
    Trie(String[] words) {
        for (String word : words) {
            add(word);
        }
    }
    
    Trie(){}
    
    public void add(String word) {
        Node current = root;
        for (int i = 0; i < word.length(); i++) {
            Character letter = word.charAt(i);
            current.setChild(letter);
            current = current.getChild(letter);
            current.size++;
        }
    }
    
    public int find(String partial) {
        Node current = root;
        
        for (int i = 0; i < partial.length(); i++) {
            Character letter = partial.charAt(i);
            current = current.getChild(letter);
            if (current == null) {
                return 0;
            }
        }
        return current.size;
    }
}
